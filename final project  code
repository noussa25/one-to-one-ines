import React, { useState, useEffect, useRef } from 'react';
import { CheckCircle, XCircle, RotateCcw, Trophy, Clock, Star, ChevronRight, Play, Brain, Sparkles, Target, Award, Zap, BookOpen, Globe, Beaker, Palette, Scroll } from 'lucide-react';

const QuizApp = () => {
  // Enhanced quiz data with more sophisticated content
  const quizData = [
    {
      id: 1,
      question: "Which European capital is known as the 'City of Light' and hosts the headquarters of UNESCO?",
      options: ["London", "Berlin", "Paris", "Vienna"],
      correctAnswer: 2,
      category: "Geography",
      difficulty: "Medium",
      explanation: "Paris earned the nickname 'City of Light' due to its early adoption of street lighting and its reputation as a center of education and ideas during the Age of Enlightenment.",
      icon: Globe
    },
    {
      id: 2,
      question: "What is the most abundant gas in Mars' atmosphere?",
      options: ["Oxygen", "Carbon Dioxide", "Nitrogen", "Argon"],
      correctAnswer: 1,
      category: "Science",
      difficulty: "Hard",
      explanation: "Mars' atmosphere is about 95% carbon dioxide, making it very different from Earth's nitrogen-rich atmosphere.",
      icon: Beaker
    },
    {
      id: 3,
      question: "Which Renaissance artist created the ceiling frescoes of the Sistine Chapel?",
      options: ["Leonardo da Vinci", "Raphael", "Michelangelo", "Donatello"],
      correctAnswer: 2,
      category: "Art",
      difficulty: "Medium",
      explanation: "Michelangelo painted the iconic ceiling of the Sistine Chapel between 1508 and 1512, featuring nine scenes from the Book of Genesis.",
      icon: Palette
    },
    {
      id: 4,
      question: "Which ocean current helps moderate the climate of Western Europe?",
      options: ["California Current", "Kuroshio Current", "Gulf Stream", "Canary Current"],
      correctAnswer: 2,
      category: "Geography",
      difficulty: "Hard",
      explanation: "The Gulf Stream carries warm water from the Gulf of Mexico across the Atlantic, significantly warming Western Europe's climate.",
      icon: Globe
    },
    {
      id: 5,
      question: "The Rosetta Stone was crucial in deciphering which ancient script?",
      options: ["Cuneiform", "Hieroglyphics", "Linear B", "Sanskrit"],
      correctAnswer: 1,
      category: "History",
      difficulty: "Medium",
      explanation: "The Rosetta Stone contained the same text in three scripts including hieroglyphics, enabling scholars to finally decode ancient Egyptian writing.",
      icon: Scroll
    },
    {
      id: 6,
      question: "What is the quantum mechanical property that prevents two electrons from occupying the same state?",
      options: ["Heisenberg Principle", "Pauli Exclusion Principle", "Schrödinger Equation", "de Broglie Hypothesis"],
      correctAnswer: 1,
      category: "Science",
      difficulty: "Hard",
      explanation: "The Pauli Exclusion Principle states that no two fermions can occupy the same quantum state simultaneously, fundamental to atomic structure.",
      icon: Beaker
    },
    {
      id: 7,
      question: "Which tectonic plate boundary is responsible for the formation of the Himalayas?",
      options: ["Divergent", "Transform", "Convergent", "Subduction"],
      correctAnswer: 2,
      category: "Geography",
      difficulty: "Hard",
      explanation: "The Himalayas formed from the convergent collision between the Indian and Eurasian plates, creating the world's highest mountain range.",
      icon: Globe
    },
    {
      id: 8,
      question: "In James Joyce's 'Ulysses', the events of the novel take place over how many days?",
      options: ["One day", "Three days", "One week", "One month"],
      correctAnswer: 0,
      category: "Literature",
      difficulty: "Hard",
      explanation: "Joyce's masterpiece 'Ulysses' chronicles the events of a single day (June 16, 1904) in Dublin, paralleling Homer's Odyssey.",
      icon: BookOpen
    },
    {
      id: 9,
      question: "What is the name of the theoretical boundary around a black hole beyond which nothing can escape?",
      options: ["Photon Sphere", "Event Horizon", "Singularity", "Accretion Disk"],
      correctAnswer: 1,
      category: "Science",
      difficulty: "Medium",
      explanation: "The Event Horizon is the point of no return around a black hole where the escape velocity equals the speed of light.",
      icon: Beaker
    },
    {
      id: 10,
      question: "Which Baroque composer wrote 'The Four Seasons' violin concertos?",
      options: ["Johann Sebastian Bach", "Antonio Vivaldi", "George Frideric Handel", "Arcangelo Corelli"],
      correctAnswer: 1,
      category: "Art",
      difficulty: "Medium",
      explanation: "Vivaldi's 'The Four Seasons' is one of the most recognizable pieces of Baroque music, featuring innovative musical descriptions of seasonal changes.",
      icon: Palette
    }
  ];

  // Advanced state management
  const [gameState, setGameState] = useState('welcome'); // 'welcome', 'playing', 'review', 'completed'
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [userAnswers, setUserAnswers] = useState([]);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [score, setScore] = useState(0);
  const [timeElapsed, setTimeElapsed] = useState(0);
  const [questionTime, setQuestionTime] = useState(0);
  const [showFeedback, setShowFeedback] = useState(false);
  const [quizStartTime, setQuizStartTime] = useState(null);
  const [questionStartTime, setQuestionStartTime] = useState(null);
  const [streak, setStreak] = useState(0);
  const [maxStreak, setMaxStreak] = useState(0);
  const [showExplanation, setShowExplanation] = useState(false);
  const [particles, setParticles] = useState([]);
  const [achievements, setAchievements] = useState([]);

  // Refs for animations
  const confettiRef = useRef();
  const questionRef = useRef();

  // Particle system for visual effects
  useEffect(() => {
    const generateParticles = () => {
      const newParticles = [];
      for (let i = 0; i < 50; i++) {
        newParticles.push({
          id: i,
          x: Math.random() * 100,
          y: Math.random() * 100,
          size: Math.random() * 4 + 1,
          speed: Math.random() * 2 + 1,
          opacity: Math.random() * 0.5 + 0.3
        });
      }
      setParticles(newParticles);
    };

    if (gameState === 'welcome' || gameState === 'completed') {
      generateParticles();
      const interval = setInterval(() => {
        setParticles(prev => prev.map(particle => ({
          ...particle,
          y: (particle.y + particle.speed) % 100
        })));
      }, 100);
      return () => clearInterval(interval);
    }
  }, [gameState]);

  // Enhanced timer with question-specific tracking
  useEffect(() => {
    let interval = null;
    if (gameState === 'playing' && quizStartTime && !showFeedback) {
      interval = setInterval(() => {
        const now = Date.now();
        setTimeElapsed(now - quizStartTime);
        if (questionStartTime) {
          setQuestionTime(now - questionStartTime);
        }
      }, 100);
    }
    return () => clearInterval(interval);
  }, [gameState, quizStartTime, questionStartTime, showFeedback]);

  // Achievement system
  const checkAchievements = (newScore, newStreak, timeSpent) => {
    const newAchievements = [];
    
    if (newScore === quizData.length) newAchievements.push({ id: 'perfect', name: 'Perfect Score!', icon: '🏆' });
    if (newStreak >= 5) newAchievements.push({ id: 'streak', name: 'Hot Streak!', icon: '🔥' });
    if (timeSpent < 60000) newAchievements.push({ id: 'speed', name: 'Speed Demon!', icon: '⚡' });
    if (newScore >= quizData.length * 0.9) newAchievements.push({ id: 'expert', name: 'Quiz Master!', icon: '🎓' });
    
    setAchievements(newAchievements);
  };

  // Format time with milliseconds
  const formatTime = (ms, showMs = false) => {
    const totalSeconds = Math.floor(ms / 1000);
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    const milliseconds = Math.floor((ms % 1000) / 10);
    
    if (showMs) {
      return `${minutes}:${seconds.toString().padStart(2, '0')}.${milliseconds.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  // Enhanced quiz start
  const startQuiz = () => {
    setGameState('playing');
    setCurrentQuestion(0);
    setUserAnswers([]);
    setSelectedAnswer(null);
    setScore(0);
    setTimeElapsed(0);
    setQuestionTime(0);
    setShowFeedback(false);
    setShowExplanation(false);
    setStreak(0);
    setMaxStreak(0);
    setAchievements([]);
    const now = Date.now();
    setQuizStartTime(now);
    setQuestionStartTime(now);
  };

  // Enhanced answer selection with animation
  const handleAnswerSelect = (answerIndex) => {
    if (!showFeedback) {
      setSelectedAnswer(answerIndex);
      
      // Add ripple effect
      if (questionRef.current) {
        questionRef.current.classList.add('animate-pulse');
        setTimeout(() => {
          if (questionRef.current) {
            questionRef.current.classList.remove('animate-pulse');
          }
        }, 200);
      }
    }
  };

  // Enhanced answer submission with detailed tracking
  const submitAnswer = () => {
    if (selectedAnswer === null) return;

    const isCorrect = selectedAnswer === quizData[currentQuestion].correctAnswer;
    const timeTaken = questionTime;
    
    const newAnswer = {
      questionId: quizData[currentQuestion].id,
      selectedAnswer,
      correctAnswer: quizData[currentQuestion].correctAnswer,
      isCorrect,
      timeTaken,
      difficulty: quizData[currentQuestion].difficulty
    };

    setUserAnswers(prev => [...prev, newAnswer]);
    
    if (isCorrect) {
      setScore(prev => prev + 1);
      setStreak(prev => {
        const newStreak = prev + 1;
        setMaxStreak(current => Math.max(current, newStreak));
        return newStreak;
      });
    } else {
      setStreak(0);
    }
    
    setShowFeedback(true);
    
    // Trigger celebration animation for correct answers
    if (isCorrect && confettiRef.current) {
      confettiRef.current.classList.add('animate-bounce');
      setTimeout(() => {
        if (confettiRef.current) {
          confettiRef.current.classList.remove('animate-bounce');
        }
      }, 500);
    }
  };

  // Enhanced next question with smooth transitions
  const nextQuestion = () => {
    if (currentQuestion < quizData.length - 1) {
      setCurrentQuestion(prev => prev + 1);
      setSelectedAnswer(null);
      setShowFeedback(false);
      setShowExplanation(false);
      setQuestionTime(0);
      setQuestionStartTime(Date.now());
    } else {
      setGameState('completed');
      checkAchievements(score + (selectedAnswer === quizData[currentQuestion].correctAnswer ? 1 : 0), maxStreak, timeElapsed);
    }
  };

  // Get difficulty color
  const getDifficultyColor = (difficulty) => {
    const colors = {
      Easy: 'bg-green-100 text-green-700 border-green-200',
      Medium: 'bg-yellow-100 text-yellow-700 border-yellow-200',
      Hard: 'bg-red-100 text-red-700 border-red-200'
    };
    return colors[difficulty] || 'bg-gray-100 text-gray-700 border-gray-200';
  };

  // Get category styling
  const getCategoryColor = (category) => {
    const colors = {
      Geography: 'from-blue-500 to-cyan-500',
      Science: 'from-green-500 to-emerald-500',
      Art: 'from-purple-500 to-pink-500',
      History: 'from-orange-500 to-red-500',
      Literature: 'from-indigo-500 to-purple-500'
    };
    return colors[category] || 'from-gray-500 to-gray-600';
  };

  // Get performance analysis
  const getDetailedAnalysis = () => {
    const totalTime = timeElapsed / 1000;
    const avgTimePerQuestion = totalTime / quizData.length;
    const correctAnswers = userAnswers.filter(a => a.isCorrect).length;
    const percentage = Math.round((correctAnswers / quizData.length) * 100);
    
    let performance = 'Needs Improvement';
    let performanceColor = 'text-red-600';
    let performanceIcon = '📚';
    
    if (percentage >= 90) {
      performance = 'Outstanding Master';
      performanceColor = 'text-purple-600';
      performanceIcon = '🌟';
    } else if (percentage >= 80) {
      performance = 'Excellent Scholar';
      performanceColor = 'text-green-600';
      performanceIcon = '🏆';
    } else if (percentage >= 70) {
      performance = 'Good Student';
      performanceColor = 'text-blue-600';
      performanceIcon = '👏';
    } else if (percentage >= 60) {
      performance = 'Average Learner';
      performanceColor = 'text-yellow-600';
      performanceIcon = '👍';
    }
    
    return {
      percentage,
      performance,
      performanceColor,
      performanceIcon,
      avgTimePerQuestion: avgTimePerQuestion.toFixed(1),
      totalTime: totalTime.toFixed(1)
    };
  };

  // Welcome Screen with Advanced Design
  if (gameState === 'welcome') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
        {/* Animated Background Particles */}
        <div className="absolute inset-0">
          {particles.map(particle => (
            <div
              key={particle.id}
              className="absolute w-1 h-1 bg-white rounded-full animate-pulse"
              style={{
                left: `${particle.x}%`,
                top: `${particle.y}%`,
                opacity: particle.opacity,
                animationDelay: `${particle.id * 0.1}s`
              }}
            />
          ))}
        </div>

        {/* Gradient Orbs */}
        <div className="absolute top-20 left-20 w-72 h-72 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
        <div className="absolute top-40 right-20 w-96 h-96 bg-cyan-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-2000"></div>
        <div className="absolute -bottom-20 left-40 w-80 h-80 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-4000"></div>

        <div className="relative z-10 flex items-center justify-center min-h-screen p-6">
          <div className="bg-white/10 backdrop-blur-lg rounded-3xl shadow-2xl border border-white/20 p-10 max-w-2xl w-full text-center transform hover:scale-105 transition-all duration-700">
            
            {/* Main Header */}
            <div className="mb-10">
              <div className="relative">
                <div className="w-28 h-28 bg-gradient-to-br from-purple-500 to-cyan-500 rounded-full flex items-center justify-center mx-auto mb-6 shadow-2xl animate-bounce">
                  <Brain className="w-14 h-14 text-white" />
                </div>
                <div className="absolute -top-2 -right-2 w-8 h-8">
                  <Sparkles className="w-8 h-8 text-yellow-400 animate-spin" />
                </div>
              </div>
              <h1 className="text-5xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent mb-4">
                Ultimate Quiz Challenge
              </h1>
              <p className="text-xl text-gray-300 mb-2">Test Your Knowledge Across Multiple Domains</p>
              <p className="text-lg text-gray-400">Advanced Assessment with Real-time Analytics</p>
            </div>
            
            {/* Feature Cards */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-10">
              <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10 hover:bg-white/10 transition-all duration-300">
                <Target className="w-10 h-10 text-cyan-400 mx-auto mb-4" />
                <h3 className="text-white font-semibold mb-2">Smart Questions</h3>
                <p className="text-gray-400 text-sm">{quizData.length} Curated Questions</p>
              </div>
              <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10 hover:bg-white/10 transition-all duration-300">
                <Zap className="w-10 h-10 text-purple-400 mx-auto mb-4" />
                <h3 className="text-white font-semibold mb-2">Real-time Analytics</h3>
                <p className="text-gray-400 text-sm">Performance Tracking</p>
              </div>
              <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10 hover:bg-white/10 transition-all duration-300">
                <Award className="w-10 h-10 text-pink-400 mx-auto mb-4" />
                <h3 className="text-white font-semibold mb-2">Achievement System</h3>
                <p className="text-gray-400 text-sm">Unlock Rewards</p>
              </div>
            </div>

            {/* Categories Preview */}
            <div className="mb-10">
              <h3 className="text-white font-semibold mb-4">Question Categories</h3>
              <div className="flex flex-wrap justify-center gap-3">
                {[...new Set(quizData.map(q => q.category))].map(category => {
                  const IconComponent = quizData.find(q => q.category === category)?.icon || BookOpen;
                  return (
                    <div key={category} className={`bg-gradient-to-r ${getCategoryColor(category)} text-white px-4 py-2 rounded-full text-sm font-medium flex items-center gap-2 shadow-lg`}>
                      <IconComponent className="w-4 h-4" />
                      {category}
                    </div>
                  );
                })}
              </div>
            </div>

            {/* Start Button */}
            <button
              onClick={startQuiz}
              className="group relative w-full bg-gradient-to-r from-purple-600 via-pink-600 to-cyan-600 text-white font-bold py-6 px-12 rounded-2xl hover:from-purple-700 hover:via-pink-700 hover:to-cyan-700 transform hover:scale-105 transition-all duration-300 shadow-2xl overflow-hidden"
            >
              <div className="absolute inset-0 bg-gradient-to-r from-cyan-600 via-purple-600 to-pink-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative flex items-center justify-center gap-3">
                <Play className="w-6 h-6" />
                <span className="text-xl">Begin Ultimate Challenge</span>
                <ChevronRight className="w-6 h-6 group-hover:translate-x-1 transition-transform duration-300" />
              </div>
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Enhanced Playing Screen
  if (gameState === 'playing') {
    const question = quizData[currentQuestion];
    const progress = ((currentQuestion + 1) / quizData.length) * 100;
    const IconComponent = question.icon;

    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-4 relative overflow-hidden">
        
        {/* Animated Background Elements */}
        <div className="absolute top-20 right-20 w-64 h-64 bg-purple-500/20 rounded-full filter blur-3xl animate-pulse"></div>
        <div className="absolute bottom-20 left-20 w-96 h-96 bg-cyan-500/10 rounded-full filter blur-3xl animate-pulse animation-delay-2000"></div>

        <div className="max-w-6xl mx-auto relative z-10">
          
          {/* Enhanced Header */}
          <div className="bg-white/10 backdrop-blur-lg rounded-3xl shadow-2xl border border-white/20 p-8 mb-8">
            <div className="flex justify-between items-center mb-6">
              <div className="flex items-center gap-6">
                <div className="text-4xl font-bold text-transparent bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text">
                  {currentQuestion + 1}/{quizData.length}
                </div>
                <div className="flex items-center gap-4">
                  <div className={`bg-gradient-to-r ${getCategoryColor(question.category)} text-white px-4 py-2 rounded-full text-sm font-medium flex items-center gap-2 shadow-lg`}>
                    <IconComponent className="w-4 h-4" />
                    {question.category}
                  </div>
                  <div className={`px-3 py-1 rounded-full text-xs font-medium border ${getDifficultyColor(question.difficulty)}`}>
                    {question.difficulty}
                  </div>
                </div>
              </div>
              
              <div className="text-right">
                <div className="flex items-center gap-6 text-white">
                  <div className="flex items-center gap-2">
                    <Trophy className="w-5 h-5 text-yellow-400" />
                    <span className="text-xl font-bold">{score}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Zap className="w-5 h-5 text-orange-400" />
                    <span className="text-lg font-semibold">{streak}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Clock className="w-5 h-5 text-cyan-400" />
                    <span className="font-mono">{formatTime(timeElapsed)}</span>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Enhanced Progress Bar */}
            <div className="relative">
              <div className="w-full bg-white/10 rounded-full h-4 overflow-hidden">
                <div 
                  className="h-full bg-gradient-to-r from-cyan-500 via-purple-500 to-pink-500 transition-all duration-1000 ease-out relative"
                  style={{ width: `${progress}%` }}
                >
                  <div className="absolute inset-0 bg-white/20 animate-pulse"></div>
                </div>
              </div>
              <div className="absolute right-0 -top-8 text-white text-sm font-medium">
                {Math.round(progress)}% Complete
              </div>
            </div>
          </div>

          {/* Enhanced Question Card */}
          <div ref={questionRef} className="bg-white/10 backdrop-blur-lg rounded-3xl shadow-2xl border border-white/20 p-10 transition-all duration-500">
            <div className="text-center mb-8">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-cyan-500 rounded-full flex items-center justify-center mx-auto mb-6 shadow-lg">
                <IconComponent className="w-8 h-8 text-white" />
              </div>
              <h2 className="text-3xl font-bold text-white mb-4 leading-relaxed">
                {question.question}
              </h2>
              <div className="text-gray-400">
                Question {currentQuestion + 1} • {formatTime(questionTime, true)} elapsed
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-10">
              {question.options.map((option, index) => {
                let buttonClass = "group relative p-8 text-left rounded-2xl border-2 transition-all duration-300 transform hover:scale-[1.02] ";
                
                if (showFeedback) {
                  if (index === question.correctAnswer) {
                    buttonClass += "bg-green-500/20 border-green-400 text-green-100 shadow-lg shadow-green-500/25";
                  } else if (index === selectedAnswer && index !== question.correctAnswer) {
                    buttonClass += "bg-red-500/20 border-red-400 text-red-100 shadow-lg shadow-red-500/25";
                  } else {
                    buttonClass += "bg-white/5 border-white/20 text-gray-400";
                  }
                } else if (selectedAnswer === index) {
                  buttonClass += "bg-purple-500/20 border-purple-400 text-purple-100 shadow-lg shadow-purple-500/25";
                } else {
                  buttonClass += "bg-white/5 border-white/20 text-white hover:bg-white/10 hover:border-purple-400/50 hover:shadow-lg hover:shadow-purple-500/25";
                }

                return (
                  <button
                    key={index}
                    onClick={() => handleAnswerSelect(index)}
                    className={buttonClass}
                    disabled={showFeedback}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="w-10 h-10 rounded-full bg-white/10 flex items-center justify-center text-sm font-bold">
                          {String.fromCharCode(65 + index)}
                        </div>
                        <span className="text-lg font-medium">{option}</span>
                      </div>
                      {showFeedback && index === question.correctAnswer && (
                        <CheckCircle className="w-7 h-7 text-green-400" ref={confettiRef} />
                      )}
                      {showFeedback && index === selectedAnswer && index !== question.correctAnswer && (
                        <XCircle className="w-7 h-7 text-red-400" />
                      )}
                    </div>
                  </button>
                );
              })}
            </div>

            {/* Enhanced Feedback Section */}
            {showFeedback && (
              <div className="space-y-6 animate-fade-in">
                <div className="p-6 rounded-2xl border-2 transition-all duration-500">
                  {selectedAnswer === question.correctAnswer ? (
                    <div className="bg-green-500/10 border-green-400/50 rounded-2xl p-6">
                      <div className="flex items-center gap-4 mb-4">
                        <CheckCircle className="w-8 h-8 text-green-400" />
                        <div>
                          <h3 className="text-xl font-bold text-green-100">Excellent! Correct Answer!</h3>
                          <p className="text-green-200">+1 point • Streak: {streak}</p>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="bg-red-500/10 border-red-400/50 rounded-2xl p-6">
                      <div className="flex items-center gap-4 mb-4">
                        <XCircle className="w-8 h-8 text-red-400" />
                        <div>
                          <h3 className="text-xl font-bold text-red-100">Incorrect Answer</h3>
                          <p className="text-red-200">The correct answer was: <span className="font-semibold">{question.options[question.correctAnswer]}</span></p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Explanation */}
                <div className="bg-white/5 border border-white/10 rounded-2xl p-6">
                  <button
                    onClick={() => setShowExplanation(!showExplanation)}
                    className="w-full flex items-center justify-between text-white hover:text-cyan-300 transition-colors duration-200"
                  >
                    <span className="text-lg font-semibold">💡 Detailed Explanation</span>
                    <ChevronRight className={`w-5 h-5 transform transition-transform duration-200 ${showExplanation ? 'rotate-90' : ''}`} />
                  </button>
                  {showExplanation && (
                    <div className="mt-4 pt-4 border-t border-white/10">
                      <p className="text-gray-300 leading-relaxed">{question.explanation}</p>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Enhanced Action Buttons */}
            <div className="flex gap-4 mt-8">
              {!showFeedback ? (
                <button
                  onClick={submitAnswer}
                  disabled={selectedAnswer === null}
                  className="flex-1 relative overflow-hidden bg-gradient-to-r from-purple-600 to-cyan-600 text-white font-bold py-6 px-10 rounded-2xl disabled:opacity-50 disabled:cursor-not-allowed hover:from-purple-700 hover:to-cyan-700 transform hover:scale-105 transition-all duration-300 shadow-2xl group"
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-cyan-600 to-purple-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <div className="relative flex items-center justify-center gap-3">
                    <Zap className="w-6 h-6" />
                    <span className="text-xl">Submit Answer</span>
                  </div>
                </button>
              ) : (
                <button
                  onClick={nextQuestion}
                  className="flex-1 relative overflow-hidden bg-gradient-to-r from-green-600 to-emerald-600 text-white font-bold py-6 px-10 rounded-2xl hover:from-green-700 hover:to-emerald-700 transform hover:scale-105 transition-all duration-300 shadow-2xl group"
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-emerald-600 to-green-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <div className="relative flex items-center justify-center gap-3">
                    {currentQuestion < quizData.length - 1 ? (
                      <>
                        <span className="text-xl">Next Question</span>
                        <ChevronRight className="w-6 h-6 group-hover:translate-x-1 transition-transform duration-300" />
                      </>
                    ) : (
                      <>
                        <Trophy className="w-6 h-6" />
                        <span className="text-xl">Complete Quiz</span>
                      </>
                    )}
                  </div>
                </button>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Enhanced Completion Screen
  if (gameState === 'completed') {
    const analysis = getDetailedAnalysis();
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
        
        {/* Celebration Particles */}
        <div className="absolute inset-0">
          {particles.map(particle => (
            <div
              key={particle.id}
              className="absolute w-2 h-2 rounded-full animate-pulse"
              style={{
                left: `${particle.x}%`,
                top: `${particle.y}%`,
                opacity: particle.opacity,
                background: `hsl(${particle.id * 36}, 70%, 60%)`,
                animationDelay: `${particle.id * 0.1}s`
              }}
            />
          ))}
        </div>

        {/* Gradient Orbs */}
        <div className="absolute top-10 left-10 w-96 h-96 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
        <div className="absolute top-20 right-10 w-80 h-80 bg-cyan-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-2000"></div>
        <div className="absolute bottom-10 left-1/3 w-72 h-72 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse animation-delay-4000"></div>

        <div className="relative z-10 flex items-center justify-center min-h-screen p-6">
          <div className="bg-white/10 backdrop-blur-lg rounded-3xl shadow-2xl border border-white/20 p-10 max-w-4xl w-full text-center">
            
            {/* Main Achievement Display */}
            <div className="mb-10">
              <div className="relative mb-8">
                <div className="w-32 h-32 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center mx-auto shadow-2xl animate-bounce">
                  <Trophy className="w-16 h-16 text-white" />
                </div>
                <div className="absolute -top-2 -right-2">
                  <Sparkles className="w-12 h-12 text-yellow-400 animate-spin" />
                </div>
              </div>
              <h1 className="text-5xl font-bold bg-gradient-to-r from-yellow-400 via-orange-400 to-red-400 bg-clip-text text-transparent mb-4">
                Quiz Completed!
              </h1>
              <div className="flex items-center justify-center gap-2 mb-4">
                <span className="text-2xl">{analysis.performanceIcon}</span>
                <p className={`text-2xl font-bold ${analysis.performanceColor}`}>
                  {analysis.performance}
                </p>
              </div>
            </div>

            {/* Achievements Display */}
            {achievements.length > 0 && (
              <div className="mb-10">
                <h3 className="text-xl text-white font-semibold mb-4">🎉 Achievements Unlocked</h3>
                <div className="flex justify-center gap-4 flex-wrap">
                  {achievements.map((achievement) => (
                    <div key={achievement.id} className="bg-gradient-to-r from-purple-500/20 to-cyan-500/20 border border-white/20 rounded-2xl p-4 text-center animate-bounce">
                      <div className="text-3xl mb-2">{achievement.icon}</div>
                      <div className="text-white text-sm font-medium">{achievement.name}</div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Detailed Statistics */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-10">
              <div className="bg-gradient-to-br from-blue-500/20 to-cyan-500/20 border border-blue-500/30 p-8 rounded-3xl">
                <div className="text-4xl font-bold text-cyan-400 mb-2">{score}</div>
                <div className="text-white font-medium mb-1">Correct Answers</div>
                <div className="text-gray-400 text-sm">out of {quizData.length}</div>
              </div>
              
              <div className="bg-gradient-to-br from-green-500/20 to-emerald-500/20 border border-green-500/30 p-8 rounded-3xl">
                <div className="text-4xl font-bold text-green-400 mb-2">{analysis.percentage}%</div>
                <div className="text-white font-medium mb-1">Accuracy</div>
                <div className="text-gray-400 text-sm">Overall Score</div>
              </div>
              
              <div className="bg-gradient-to-br from-purple-500/20 to-pink-500/20 border border-purple-500/30 p-8 rounded-3xl">
                <div className="text-4xl font-bold text-purple-400 mb-2">{formatTime(timeElapsed)}</div>
                <div className="text-white font-medium mb-1">Total Time</div>
                <div className="text-gray-400 text-sm">{analysis.avgTimePerQuestion}s avg</div>
              </div>
              
              <div className="bg-gradient-to-br from-orange-500/20 to-red-500/20 border border-orange-500/30 p-8 rounded-3xl">
                <div className="text-4xl font-bold text-orange-400 mb-2">{maxStreak}</div>
                <div className="text-white font-medium mb-1">Best Streak</div>
                <div className="text-gray-400 text-sm">Consecutive Correct</div>
              </div>
            </div>

            {/* Category Breakdown */}
            <div className="mb-10">
              <h3 className="text-xl text-white font-semibold mb-6">📊 Performance by Category</h3>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {[...new Set(quizData.map(q => q.category))].map(category => {
                  const categoryQuestions = quizData.filter(q => q.category === category);
                  const categoryCorrect = userAnswers.filter(a => {
                    const question = quizData.find(q => q.id === a.questionId);
                    return question?.category === category && a.isCorrect;
                  }).length;
                  const categoryPercentage = Math.round((categoryCorrect / categoryQuestions.length) * 100);
                  const IconComponent = categoryQuestions[0]?.icon || BookOpen;
                  
                  return (
                    <div key={category} className="bg-white/5 border border-white/10 rounded-2xl p-4 text-center">
                      <div className={`w-12 h-12 bg-gradient-to-r ${getCategoryColor(category)} rounded-full flex items-center justify-center mx-auto mb-3`}>
                        <IconComponent className="w-6 h-6 text-white" />
                      </div>
                      <div className="text-2xl font-bold text-white mb-1">{categoryPercentage}%</div>
                      <div className="text-gray-300 text-sm font-medium">{category}</div>
                      <div className="text-gray-500 text-xs">{categoryCorrect}/{categoryQuestions.length}</div>
                    </div>
                  );
                })}
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex flex-col sm:flex-row gap-4">
              <button
                onClick={() => setGameState('review')}
                className="flex-1 relative overflow-hidden bg-gradient-to-r from-gray-600 to-slate-600 text-white font-bold py-6 px-10 rounded-2xl hover:from-gray-700 hover:to-slate-700 transform hover:scale-105 transition-all duration-300 shadow-2xl group"
              >
                <div className="absolute inset-0 bg-gradient-to-r from-slate-600 to-gray-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <div className="relative flex items-center justify-center gap-3">
                  <Star className="w-6 h-6" />
                  <span className="text-xl">Review Answers</span>
                </div>
              </button>
              
              <button
                onClick={startQuiz}
                className="flex-1 relative overflow-hidden bg-gradient-to-r from-purple-600 to-cyan-600 text-white font-bold py-6 px-10 rounded-2xl hover:from-purple-700 hover:to-cyan-700 transform hover:scale-105 transition-all duration-300 shadow-2xl group"
              >
                <div className="absolute inset-0 bg-gradient-to-r from-cyan-600 to-purple-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <div className="relative flex items-center justify-center gap-3">
                  <RotateCcw className="w-6 h-6" />
                  <span className="text-xl">Take Quiz Again</span>
                </div>
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Enhanced Review Screen
  if (gameState === 'review') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6">
        <div className="max-w-6xl mx-auto">
          
          {/* Header */}
          <div className="bg-white/10 backdrop-blur-lg rounded-3xl shadow-2xl border border-white/20 p-8 mb-8">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-4xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent mb-2">
                  Detailed Review
                </h1>
                <p className="text-gray-300">Analyze your performance and learn from explanations</p>
              </div>
              <div className="text-right">
                <div className="text-3xl font-bold text-white mb-1">{score}/{quizData.length}</div>
                <div className="text-gray-400">Final Score</div>
              </div>
            </div>
          </div>

          {/* Questions Review */}
          <div className="space-y-8">
            {quizData.map((question, index) => {
              const userAnswer = userAnswers[index];
              const isCorrect = userAnswer?.isCorrect;
              const IconComponent = question.icon;

              return (
                <div key={question.id} className="bg-white/10 backdrop-blur-lg rounded-3xl shadow-xl border border-white/20 p-8 hover:bg-white/15 transition-all duration-300">
                  
                  {/* Question Header */}
                  <div className="flex items-start gap-6 mb-6">
                    <div className={`w-14 h-14 rounded-2xl flex items-center justify-center font-bold text-white text-xl shadow-lg ${isCorrect ? 'bg-green-500' : 'bg-red-500'}`}>
                      {index + 1}
                    </div>
                    
                    <div className="flex-1">
                      <div className="flex items-center gap-4 mb-4">
                        <div className={`bg-gradient-to-r ${getCategoryColor(question.category)} text-white px-4 py-2 rounded-full text-sm font-medium flex items-center gap-2`}>
                          <IconComponent className="w-4 h-4" />
                          {question.category}
                        </div>
                        <div className={`px-3 py-1 rounded-full text-xs font-medium border ${getDifficultyColor(question.difficulty)}`}>
                          {question.difficulty}
                        </div>
                        <div className="flex items-center gap-2">
                          {isCorrect ? (
                            <CheckCircle className="w-6 h-6 text-green-400" />
                          ) : (
                            <XCircle className="w-6 h-6 text-red-400" />
                          )}
                          <span className={`font-semibold ${isCorrect ? 'text-green-400' : 'text-red-400'}`}>
                            {isCorrect ? 'Correct' : 'Incorrect'}
                          </span>
                        </div>
                        <div className="text-gray-400 text-sm">
                          ⏱️ {(userAnswer?.timeTaken / 1000).toFixed(1)}s
                        </div>
                      </div>
                      
                      <h3 className="text-xl font-bold text-white mb-6 leading-relaxed">{question.question}</h3>
                      
                      {/* Options Grid */}
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                        {question.options.map((option, optionIndex) => {
                          let optionClass = "p-4 rounded-xl border transition-all duration-200 ";
                          
                          if (optionIndex === question.correctAnswer) {
                            optionClass += "bg-green-500/20 border-green-400 text-green-100";
                          } else if (optionIndex === userAnswer?.selectedAnswer && !isCorrect) {
                            optionClass += "bg-red-500/20 border-red-400 text-red-100";
                          } else {
                            optionClass += "bg-white/5 border-white/20 text-gray-300";
                          }

                          return (
                            <div key={optionIndex} className={optionClass}>
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-3">
                                  <div className="w-8 h-8 rounded-full bg-white/10 flex items-center justify-center text-sm font-bold">
                                    {String.fromCharCode(65 + optionIndex)}
                                  </div>
                                  <span className="font-medium">{option}</span>
                                </div>
                                {optionIndex === question.correctAnswer && (
                                  <CheckCircle className="w-5 h-5 text-green-400" />
                                )}
                                {optionIndex === userAnswer?.selectedAnswer && !isCorrect && (
                                  <XCircle className="w-5 h-5 text-red-400" />
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>

                      {/* Explanation */}
                      <div className="bg-white/5 border border-white/10 rounded-xl p-6">
                        <div className="flex items-center gap-3 mb-3">
                          <div className="w-8 h-8 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-full flex items-center justify-center">
                            <span className="text-white font-bold text-sm">💡</span>
                          </div>
                          <h4 className="text-white font-semibold">Explanation</h4>
                        </div>
                        <p className="text-gray-300 leading-relaxed">{question.explanation}</p>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>

          {/* Bottom Actions */}
          <div className="mt-12 text-center">
            <button
              onClick={startQuiz}
              className="relative overflow-hidden bg-gradient-to-r from-purple-600 to-cyan-600 text-white font-bold py-6 px-12 rounded-2xl hover:from-purple-700 hover:to-cyan-700 transform hover:scale-105 transition-all duration-300 shadow-2xl group"
            >
              <div className="absolute inset-0 bg-gradient-to-r from-cyan-600 to-purple-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative flex items-center justify-center gap-3">
                <RotateCcw className="w-6 h-6" />
                <span className="text-xl">Challenge Yourself Again</span>
              </div>
            </button>
          </div>
        </div>
      </div>
    );
  }

  return null;
};

export default QuizApp;
